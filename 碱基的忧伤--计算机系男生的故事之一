#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;
int v[5][5];
int dp[10001][10001];//相似度数组
int d;
int a[10001], b[10001];
int main()
{
	int N;
	int i, j, k;
	int n;
	string tempa, tempb;
	while (cin >> N)
	{
		printf("Case #%d", N);
		cout << endl;

		for (i = 1; i <= 4; i++)
			for (j = 1; j <= 4; j++)
				cin >> v[i][j];
		cin >> d;
		cin >> n;
		for (i = 0; i <= 4; i++)
		{
			v[0][i] = d;
			v[i][0] = d;
		}
		for (i = 1; i <= n; i++)
		{
			cin >> tempa >> tempb;
			for (j = 1; j <= tempa.length(); j++)
			{
				if (tempa[j - 1] == 'A')
					a[j] = 1;
				else if (tempa[j - 1] == 'G')
					a[j] = 2;
				else if (tempa[j - 1] == 'C')
					a[j] = 3;
				else if (tempa[j - 1] == 'T')
					a[j] = 4;
			}
			for (j = 1; j <= tempb.length(); j++)
			{
				if (tempb[j - 1] == 'A')
					b[j] = 1;
				else if (tempb[j - 1] == 'G')
					b[j] = 2;
				else if (tempb[j - 1] == 'C')
					b[j] = 3;
				else if (tempb[j - 1] == 'T')
					b[j] = 4;
			}
			int s = tempa.length(), t = tempb.length();
			dp[0][0] = 0;
			for (j = 1; j <= s + t; j++)
			{
				dp[j][0] = dp[j - 1][0] + d;
				dp[0][j] = dp[0][j - 1] + d;
			}
			dp[0][0] = 0;

			for (j = 2; j <= s + t; j++)
			{
				for (k = 1; k <= j - 1; k++)
				{
					dp[j - k][k] = max(dp[j - k][k], dp[j - 1 - k][k] + v[a[j - k]][0]);
					dp[j - k][k] = max(dp[j - k][k], dp[j - k][k - 1] + v[0][b[k]]);
					dp[j - k][k] = max(dp[j - k][k], dp[j - 1 - k][k - 1] + v[a[j - k]][b[k]]);
				}
			}
			cout << dp[s][t] << endl;
		}
	}
}
